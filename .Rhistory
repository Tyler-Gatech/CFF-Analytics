any_desc <-  c("rp_fumble_recovery", "rp_safety", "rp_fumble_lost", "rp_fumble_lost_td" )
#tcreating a vector of explicit runs
run_ids <- c(-1,5,68)
run_group <- c("run","run","run")
run_desc <- c("run_fumble_recovered","run_non_td", "run_td")
ids <- c(run_ids, any_ids, pass_ids)
ids
leftovers <- unique(data$playtype)[!unique(data$playtype) %in% ids]
for (i in 1:length(leftovers)){
#i = 20
print(c("current:",leftovers[i]))
print(c("playtype:", leftovers[i], " volume:", sum(data$playtype==leftovers[i])))
print(c("sample:", sample(as.character(data$playstring[data$playtype == leftovers[i]]),1)))
print(c("sample:", sample(as.character(data$playstring[data$playtype == leftovers[i]]),1)))
}
leftovers
for (i in 1:length(leftovers)){
#i = 20
print(c("current:",leftovers[i]))
print(c("playtype:", leftovers[i], " volume:", sum(data$playtype==leftovers[i])))
print(c("sample:", sample(as.character(data$playstring[data$playtype == leftovers[i]]),1)))
print(c("sample:", sample(as.character(data$playstring[data$playtype == leftovers[i]]),1)))
}
for (i in 1:length(leftovers)){
#i = 20
print(c("current:",leftovers[i]))
print(c("playtype:", leftovers[i], " volume:", sum(data$playtype==leftovers[i])))
print(c("sample:", sample(as.character(data$playstring[data$playtype == leftovers[i]]),1)))
print(c("sample:", sample(as.character(data$playstring[data$playtype == leftovers[i]]),1)))
}
for (i in 1:length(leftovers)){
#i = 20
print(c("current:",leftovers[i]))
print(c("playtype:", leftovers[i], " volume:", sum(data$playtype==leftovers[i])))
print(c("sample:", sample(as.character(data$playstring[data$playtype == leftovers[i]]),1)))
print(c("sample:", sample(as.character(data$playstring[data$playtype == leftovers[i]]),1)))
}
sample(grepl("block", data$playstring, ignore.case = T),2)
head(data$playstring[grepl("block", data$playstring, ignore.case = T),])
grepl("block", data$playstring, ignore.case = T)
data[grepl("block", data$playstring, ignore.case = T),]
data$playstring[grepl("block", data$playstring, ignore.case = T),]
data$playstring[grepl("block", data$playstring, ignore.case = T)]
data$playstring[grepl("block", data$playstring, ignore.case = T)&grepl("block", data$playstring, ignore.case = T)]
data$playstring[(grepl("block", data$playstring, ignore.case = T))&&(grepl("block", data$playstring, ignore.case = T))]
as.character(data$playstring[(grepl("block", data$playstring, ignore.case = T))
&(grepl("block", data$playstring, ignore.case = T))])
as.character(data$playstring[(grepl("block", data$playstring, ignore.case = T))
&(grepl("punt", data$playstring, ignore.case = T))])
data[data$playstring==""Magill Bauerle punt blocked by Demetrius Taylor blocked by Demetrius Taylor  D'Marco Jackson return for 15 yds to the GeoSo 31",]
data[data$playstring=="Magill Bauerle punt blocked by Demetrius Taylor blocked by Demetrius Taylor  D'Marco Jackson return for 15 yds to the GeoSo 31",]
data[121914:121916,]
special_ids <- c(53, 52, 32, 12,
59, 60, 18, 17,
34, 37, 40, 38,
41 )
special_group <- c("kickoff", "punt", "kickoff", "kickoff",
"fg","fg","fg","punt",
"punt", "punt", "fg", "fg",
"fg"
)
special_desc <- c("kickoff_touchback","punt_return", "kickoff_return_td", "kickoff_return",
"fg_good","fg_miss","fg_block","punt_block",
"punt_return_td", "punt_block_td", "fg_miss_return", "fg_block_td",
"fg_miss_return_td"
)
ids <- c(ids,special_ids
ids <- c(ids,special_ids
)
ids <- c(ids,special_ids)
head(ids)
ids
unique(data$playtype %in% ids)
unique(data$playtype) %in% ids
group <- c(run_group, any_group, pass_group, special_group)
ids <- c(ids,special_ids)
group <- c(run_group, any_group, pass_group, special_group)
desc <- c(run_desc, any_desc, pass_desc, special_desc)
play_mapping_2018 <- cbind(ids, group, desc)
length(ids)
length(group)
length(desc)
ids <- c(run_ids, any_ids, pass_ids, special_ids)
length(ids)
play_mapping_2018 <- cbind(ids, group, desc)
saveRDS(play_mapping_2018, "play_mapping_2018.rds")
getwd()
#make permanent
setwd("/Users/tknight01/Desktop/Github/CFF/CFF_Analysis/")
saveRDS(play_mapping_2018, "play_mapping_2018.rds")
play_mapping_2018
pass_desc <- c("pass_inc", "pass_sack", "pass_comp_no_td", "pass_int_no_td", "pass_int_td", "pass_int_no_td", "pass_comp_td")
desc <- c(run_desc, any_desc, pass_desc, special_desc)
play_mapping_2018 <- cbind(ids, group, desc)
#make permanent
saveRDS(play_mapping_2018, "play_mapping_2018.rds")
play_mapping_2018
head(data)
#quick glance at the data
head(data)
#first lets plot the number of games by team using dplyr and hist
game_totals <- data %>%
group_by(activeteam, gameid) %>%
distinct(activeteam, gameid) %>%
group_by(activeteam) %>%
summarize(game_ct = n())
hist(game_totals$game_ct)
#####To view the size of the data
dim(data)
#####What is the structure of the data
str(data)
data <- data.frame(lapply(data, as.character), stringsAsFactors=FALSE)
str(data)
####Reading Data into R
data <- read.csv("/Users/tknight01/Desktop/Github/CFF/CFBPBPData/2018_CFB_Data.csv",header=TRUE,sep=",", stringsAsFactors = F)
#####What is the structure of the data
str(data)
summary(data)
data_game_level <- data %>%
group_by(gameid, hometeam, home.spread, awayteam, away.spread) %>%
summarize (max(homescore) as final_home_score, max(awayscore) as final_away_score)
data_game_level <- data %>%
group_by(gameid, hometeam, home.spread, awayteam, away.spread) %>%
summarize (final_home_score = max(homescore) , final_away_score = max(awayscore)
data_game_level <- data %>%
group_by(gameid, hometeam, home.spread, awayteam, away.spread) %>%
summarize (final_home_score = max(homescore) , final_away_score = max(awayscore)
)
data_game_level <- data %>%
group_by(gameid, hometeam, home.spread, awayteam, away.spread) %>%
summarize (final_home_score = max(homescore) , final_away_score = max(awayscore))
data_game_level
#quick glance at the data
head(data)
data_game_level <- data %>%
group_by(gameid, hometeam, home.spread, awayteam, away.spread, o.u.) %>%
summarize (final_home_score = max(homescore) , final_away_score = max(awayscore))
data_game_level <- data %>%
group_by(gameid, hometeam, home.spread, awayteam, away.spread, o.u) %>%
summarize (final_home_score = max(homescore) , final_away_score = max(awayscore))
plot(-data_game_level$home.spread, (data_game_level$final_home_score - data_game_level$final_away_score))
data_game_level$home_win <- ifelse(data_game_level$final_home_score>data_game_level$final_away_score,1,0)
data_game_level %>%
plot(final_home_score,final_away_score)
plot(data_game_level %>%
select(final_home_score,final_away_score))
data_game_level %>%
select(final_home_score,final_away_score) %>%
ggplot(aes(x = final_home_score, y = final_away_score)) + geom_point()
library(ggplot2)
library(dplyr)
library(sqldf)
library(corrplot)
data_game_level %>%
select(final_home_score,final_away_score) %>%
ggplot(aes(x = final_home_score, y = final_away_score)) + geom_point()
data_game_level %>%
ggplot(aes(x = -home.spread, y = (final_home_score-final_away_score)) + geom_point()
data_game_level %>%
ggplot(aes(x = -home.spread, y = (final_home_score-final_away_score))) + geom_point()
data_game_level %>%
ggplot(aes(x = -home.spread, y = (final_home_score-final_away_score))) + geom_point()
boxplot((final_home_score-final_away_score)+home.spread)
boxplot((data_game_level$final_home_score-data_game_level$final_away_score)+data_game_level$home.spread)
mean((data_game_level$final_home_score-data_game_level$final_away_score)+data_game_level$home.spread)
average((data_game_level$final_home_score-data_game_level$final_away_score)+data_game_level$home.spread)
sum((data_game_level$final_home_score-data_game_level$final_away_score)+data_game_level$home.spread)
((data_game_level$final_home_score-data_game_level$final_away_score)+data_game_level$home.spread)
!is.na((data_game_level$final_home_score-data_game_level$final_away_score)+data_game_level$home.spread)
data[!is.na$home.spread]
data[!is.na(data$home.spread),] %>%
sum(home.spread)
data[!is.na(data$home.spread),] %>%
summarize(sum(home.spread))
data_game_level[!is.na(data_game_level$home.spread),] %>%
summarize(sum(home.spread)+sum(final_home_score)-sum(final_away_score))
data_game_level$final_diff <- data_game_level$home.spread +
data_game_level$final_home_score - data_game_level$final_away_score
data_game_level <- data %>%
group_by(gameid, hometeam, home.spread, awayteam, away.spread, o.u) %>%
summarize (final_home_score = max(homescore) , final_away_score = max(awayscore))
data_game_level$home_win <- ifelse(data_game_level$final_home_score>data_game_level$final_away_score,1,0)
data_game_level$diff_to_spread <- data_game_level$home.spread +
data_game_level$final_home_score - data_game_level$final_away_score
head(data_game_level)
data_game_level[1,]
data_game_level[1,1:10]
head(as.data.frame(data_game_level))
hist(data_game_level$diff_to_spread)
#clean out the NA's on spread
dgl_clean <- data_game_level[!is.na(diff_to_spread)]
#clean out the NA's on spread
dgl_clean <- data_game_level[!is.na(data_game_level$diff_to_spread),]
data_game_level$home_cover <- ifelse((data_game_level$final_home_score
+ data_game_level$home.spread
- data_game_level$final_away_score)
>0,1,0)
data_game_level$push <- ifelse((data_game_level$final_home_score
+ data_game_level$home.spread
== data_game_level$final_away_score),
1,0)
head(data_game_level)
#clean out the NA's on spread
dgl_clean <- data_game_level[!is.na(data_game_level$diff_to_spread),]
data_game_level <- data %>%
group_by(gameid, hometeam, home.spread, awayteam, away.spread, o.u) %>%
summarize (final_home_score = max(homescore) , final_away_score = max(awayscore))
#home_win flag
data_game_level$home_win <- ifelse(data_game_level$final_home_score>data_game_level$final_away_score,1,0)
#calc the difference to spread
data_game_level$diff_to_spread <- data_game_level$home.spread +
data_game_level$final_home_score - data_game_level$final_away_score
#home_cover_flag
data_game_level$home_cover <- ifelse((data_game_level$final_home_score
+ data_game_level$home.spread
- data_game_level$final_away_score)
>0,1,0)
#push_flag
data_game_level$push <- ifelse((data_game_level$final_home_score
+ data_game_level$home.spread
== data_game_level$final_away_score),
1,0)
#clean out the NA's on spread
dgl_clean <- data_game_level[!is.na(data_game_level$diff_to_spread),]
head(as.data.frame(dgl_cleam))
head(as.data.frame(dgl_clean))
sum(dgl_clean$push)/nrow(dgl_clean)
sum(dgl_clean$push)/nrow(dgl_clean)
head(as.data.frame(dgl_clean))
data_game_level$away_cover <- 1-data_game_level$home_cover-data_game_level$push
#clean out the NA's on spread
dgl_clean <- data_game_level[!is.na(data_game_level$diff_to_spread),]
#quick glance at the data
head(data)
#quick glance at the data
unique(data$gameid)
data <- read.csv("/Users/tknight01/Desktop/Github/CFF/CFBPBPData/2018_CFB_Data.csv",header=TRUE,sep=",", stringsAsFactors = F)
head(data)
library(dplyr)
data_game_team <- data %<%
group_by(activeteam, gameid) %>%
distint(activeteam, gameid)
data_game_team <- data %>%
group_by(activeteam, gameid) %>%
distint(activeteam, gameid)
data_game_team <- data %>%
group_by(activeteam, gameid) %>%
distinct(activeteam, gameid)
head(data_game_team)
install.packages("searcher")
library(searcher)
search_site("401012246", site = "google")
a <- search_site("401012246", site = "google")
library(rvest)
install.packages("rvest")
library(rvest)
lego_movie <- read_html("http://www.imdb.com/title/tt1490017/")
rating
rating <- lego_movie %>%
html_nodes("strong span") %>%
html_text() %>%
as.numeric()
rating
head(lego_movie)
lego_movie %>%
html_nodes("strong span")
lego_movie %>%
html_nodes("strong span") >%%
html_text()
lego_movie %>%
html_nodes("strong span") %>%
html_text()
test_search <- read_html("https://www.google.com/search?query=401012246+alabama")
test_search
test_search[1]
test_search %>%
html_nodes("head")
test_search
lego_movie
test_search
html_nodes(test_search)
html_nodes(test_search,'ellip')
html_nodes(test_search,'class')
html_nodes(test_search,'center')
html_nodes(test_search,'font')
html_nodes(test_search,'table')
html_nodes(test_search,'head')
html_nodes(test_search,'body')
html_nodes(test_search,'body')[1]
html_nodes(test_search,'body')[1][1]
html_nodes(test_search,'body')[[1]]
html_nodes(test_search,'body') %>%
html_nodes("div")
html_nodes(test_search,'body') %>%
html_nodes("div") %>%
html_nodes("class")
html_nodes(test_search,'body') %>%
html_nodes("div") %>%
test_search
html_nodes(test_search,'body') %>%
html_nodes("div") %>%
test_search
html_nodes(test_search,'body') %>%
html_nodes("div")
html_nodes(test_search,'body') %>%
html_nodes("div") %>%
html_nodes("class")
html_nodes(test_search,'body') %>%
html_nodes("div") %>%
html_nodes("div")
head(data_game_team)
html_nodes(test_search,'body') %>%
html_nodes("div") %>%
html_nodes("h3")
html_nodes(test_search,'body') %>%
html_nodes("h3")
html_nodes(test_search,'body') %>%
html_nodes("div")
html_nodes(test_search,'body') %>%
html_nodes("div class")
html_nodes("div)
html_nodes(test_search,'body') %>%
html_nodes("div")
html_nodes(test_search,'body') %>%
html_nodes("div")
html_nodes(test_search,'body') %>%
html_nodes("div") %>%
html_text()
html_nodes(test_search,'body') %>%
html_nodes("div") %>%
grepl("September", html_text())
html_nodes(test_search,'body') %>%
html_nodes("div")
html_nodes(test_search,'body') %>%
html_nodes("div")
a <- html_nodes(test_search,'body') %>%
html_nodes("div")
a[1]
test_search <- read_html("https://www.google.com/search?query=401012246+alabama")
a <- html_nodes(test_search,'body') %>%
html_nodes("div")
for i in a{
print(i)
}
for (i in a){
print(i)
}
test_search <- read_html("https://www.google.com/search?query=401012246+alabama")
html_nodes(.)
pages_data <- html %>%
html_nodes('.ellip') %>%
# Extract the raw text as a list
html_text()
pages_data <- test_search %>%
html_nodes('.ellip') %>%
# Extract the raw text as a list
html_text()
pages_data
pages_data <- test_search %>%
html_nodes('.pagination-page') %>%
html_text()
test_search %>%
html_nodes('.pagination-page') %>%
html_text()
test_search
a <- html_nodes(test_search,'body') %>%
html_nodes(.)
html_nodes(test_search,'body')
test_search <- read_html("https://www.google.com/search?query=401012246+alabama")
data.frame(test_search)
test_search[1]
test_search[1]$node
test_search %>%
html_nodes("head")
test_search %>%
html_nodes("center")
test_search %>%
html_nodes("font")
test_search %>%
html_nodes(".font")
pages_data <- test_search %>%
html_nodes('cst') %>%
# Extract the raw text as a list
html_text()
test_search %>%
html_nodes('cst') %>%
pages_data <- test_search %>%
html_nodes('cst') %>%
# Extract the raw text as a list
html_text()
test_search %>%
html_nodes('cst')
test_search %>%
html_nodes('body')
test_search %>%
html_nodes('body') %>%
html_nodes('cst')
test_search %>%
html_nodes('body') %>%
html_nodes('.cst')
test_search %>%
html_nodes('body') %>%
html_nodes('div')
test_search %>%
html_nodes('body') %>%
html_nodes('div') %>%
html_nodes('class')
test_search %>%
html_nodes('body') %>%
html_nodes('div') %>%
html_nodes('cOl4Id')
test_search %>%
html_nodes('body') %>%
html_nodes('div') %>%
html_nodes(.'cOl4Id')
test_search %>%
html_nodes('body') %>%
html_nodes('div')
as.vector(test_search[1])
test_search[1]
test_search
div_section <- test_search %>%
html_nodes('body') %>%
html_nodes('div')
as.vector(div_section[1])
div_section <- test_search %>%
html_nodes('body') %>%
html_nodes('div') %>%
html_text()
div_section
grepl("September", div_section)
div_section[as.vector(div_section[1])]
div_section[grepl("September", div_section)]
div_section[grepl("Game Summary", div_section)]
div_section
div_section[2]
div_section[3]
div_section[4]
div_section[15]
div_section[25]
grepl("September 1", div_section)
div_section[38]
div_section[grepl("Get a summary", div_section)]
div_section[grepl("September 1", div_section)]
div_section[38]
text <- div_section[38]
pattern = re.compile("(Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|Jul(y)?|Aug(ust)?|Sep(tember)?|Oct(ober)?|Nov(ember)?|Dec(ember)?)\s+\d{1,2}")
print(pattern.search(text).group())
pattern = re.compile("(Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|Jul(y)?|Aug(ust)?|Sep(tember)?|Oct(ober)?|Nov(ember)?|Dec(ember)?)\\s+\\d{1,2}")
pattern = regexpr("(Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|Jul(y)?|Aug(ust)?|Sep(tember)?|Oct(ober)?|Nov(ember)?|Dec(ember)?)\\s+\\d{1,2}")
pattern = regexpr("(Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|
Jul(y)?|Aug(ust)?|Sep(tember)?|Oct(ober)?|Nov(ember)?|
Dec(ember)?)\s+\d{1,2}")
pattern = regexpr("(Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|
Jul(y)?|Aug(ust)?|Sep(tember)?|Oct(ober)?|Nov(ember)?|
Dec(ember)?)\\s+\\d{1,2}")
pattern = regexpr("(Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|
Jul(y)?|Aug(ust)?|Sep(tember)?|Oct(ober)?|Nov(ember)?|
Dec(ember)?)\s+\d{1,2}", text, perl = TRUE)
pattern = regexpr("(Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|
Jul(y)?|Aug(ust)?|Sep(tember)?|Oct(ober)?|Nov(ember)?|
Dec(ember)?)\\s+\\d{1,2}", text, perl = TRUE)
regmatches(text, pattern)
pattern = regexpr("(Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|
Jul(y)?|Aug(ust)?|Sep(tember)?|Oct(ober)?|Nov(ember)?|
Dec(ember)?)\\s+\\d{1,2}+d{4}", text, perl = TRUE)
regmatches(text, pattern)
div_section[38]
pattern = regexpr("(Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|
Jul(y)?|Aug(ust)?|Sep(tember)?|Oct(ober)?|Nov(ember)?|
Dec(ember)?)\\s+\\d{1,2},\\s+d{4}", text, perl = TRUE)
regmatches(text, pattern)
pattern = regexpr("(Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|
Jul(y)?|Aug(ust)?|Sep(tember)?|Oct(ober)?|Nov(ember)?|
Dec(ember)?)\\s+\\d{1,2}+,\\s+d{4}", text, perl = TRUE)
regmatches(text, pattern)
pattern = regexpr("(Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|
Jul(y)?|Aug(ust)?|Sep(tember)?|Oct(ober)?|Nov(ember)?|
Dec(ember)?)\\s+\\d{1,2}", text, perl = TRUE)
regmatches(text, pattern)
pattern = regexpr("(Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|
Jul(y)?|Aug(ust)?|Sep(tember)?|Oct(ober)?|Nov(ember)?|
Dec(ember)?)\\s+\\d{1,2},", text, perl = TRUE)
regmatches(text, pattern)
pattern = regexpr("(Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|
Jul(y)?|Aug(ust)?|Sep(tember)?|Oct(ober)?|Nov(ember)?|
Dec(ember)?)\\s+\\d{1,2},\\s+", text, perl = TRUE)
regmatches(text, pattern)
text
pattern = regexpr("(Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|
Jul(y)?|Aug(ust)?|Sep(tember)?|Oct(ober)?|Nov(ember)?|
Dec(ember)?)\\s+\\d{1,2},\\s*d{4}", text, perl = TRUE)
regmatches(text, pattern)
pattern = regexpr("(Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|
Jul(y)?|Aug(ust)?|Sep(tember)?|Oct(ober)?|Nov(ember)?|
Dec(ember)?)\\s+\\d{1,2},\\s*", text, perl = TRUE)
regmatches(text, pattern)
pattern = regexpr("(Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|
Jul(y)?|Aug(ust)?|Sep(tember)?|Oct(ober)?|Nov(ember)?|
Dec(ember)?)\\s+\\d{1,2},\\s*.", text, perl = TRUE)
regmatches(text, pattern)
pattern = regexpr("(Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|
Jul(y)?|Aug(ust)?|Sep(tember)?|Oct(ober)?|Nov(ember)?|
Dec(ember)?)\\s+\\d{1,2},\\s*d{1}", text, perl = TRUE)
regmatches(text, pattern)
pattern = regexpr("(Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|
Jul(y)?|Aug(ust)?|Sep(tember)?|Oct(ober)?|Nov(ember)?|
Dec(ember)?)\\s+\\d{1,2},\\s*\\d{4}", text, perl = TRUE)
regmatches(text, pattern)
rm(list=ls())
library(dplyr)
library(searcher)
